<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:local="clr-namespace:TradingMaster"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <local:PriceFluctuationConverter x:Key="pftconverter"/>
    <local:PriceFormatConverter x:Key="fconverter"/>
    <local:CustomePriceFormatConverter x:Key="cfconverter"/>
    <local:MultiCustomePriceFormatConverter x:Key="mcfconverter"/>
    <local:ParameterFormatConverter x:Key="paraformatconverter"/>
    <local:BuySellForegroundConverter x:Key="bsconverter"/>
    <local:KpForegroundConverter x:Key="kpconverter"/>
    <local:OrderStatusForegroundConverter x:Key="osconverter"/>
    <local:ExecStatusForegroundConverter x:Key="esconverter" />
    <local:PositionTypeForegroundConverter x:Key="ptconverter"/>
    <local:TradeHandCountForegroundConverter x:Key="thdconverter"/>
    <local:DoubleValueFormatConverter x:Key="dvconverter"/>
    <local:BuySellStringUpdated x:Key="bssuconverter"/>
    <local:GroupOrderCodeConverter x:Key="gocconverter" />
    <local:HandValueUpdater_OF x:Key="handValueConverterOF"/>
    <local:PriceValueUpdater_OF x:Key="priceValueConverterOF"/>

    <ImageBrush x:Key="LockImage" ImageSource="Image\closeLock.jpg" Stretch="Uniform"></ImageBrush>

    <SolidColorBrush x:Key="MainBackground" Color="#F0F0F0"/>
    <!--资金查询这一栏后面，单元文本信息的颜色，静态权益-->
    <SolidColorBrush x:Key="CapitalQuery_BackLineBrush" Color="#F5F5F5"/>
    
    <SolidColorBrush x:Key="ctpValueSelBorder" Color="#96B0CD"/>
    <SolidColorBrush x:Key="ctpValueSelGridBackground" Color="White"/>
    <!--手数和价格选择控件，右面的上下选择按钮-->
    <Style TargetType="RepeatButton" x:Key="ctpbtnSpin">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border x:Name="border"  BorderThickness="0">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Color="#EDEDED" Offset="0.0"/>
                                <GradientStop Color="#CFCFCF" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Border Name="btnBorder">
                            <!--按钮-->
                            <Image Name="btnImage" Stretch="Fill">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Path=Name,RelativeSource={RelativeSource TemplatedParent}}" Value="btnUp">
                                                <Setter Property="Source" Value="/TradingMaster;component/image/SpinUp.png"></Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Path=Name,RelativeSource={RelativeSource TemplatedParent}}" Value="btnDown">
                                                <Setter Property="Source" Value="/TradingMaster;component/image/SpinDown.png"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter Property="Background">
                                                <Setter.Value>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Color="#E2F3FE" Offset="0.0"/>
                                                        <GradientStop Color="#E0EEFB" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Color="#A4D3FF" Offset="0.0"/>
                                        <GradientStop Color="#1D4A70" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--手数和价格选择控件中的TextBox的样式-->
    <Style TargetType="{x:Type TextBox}" x:Key="ctpValueSelStyleEx">
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                CornerRadius="1"
                
                BorderThickness="0">
                        <Border.Background>
                            <SolidColorBrush Color="White" />
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#96B0CD" />
                        </Border.BorderBrush>
                        <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExtendBackground" TargetType="{x:Type ScrollBar}" >
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="18"/>
                <Setter Property="Template" Value="{DynamicResource CTPHorizontalScrollBar}"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="Template" Value="{DynamicResource CTPVerticalScrollBar}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="CTPHorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="18"/>
            </Grid.ColumnDefinitions>
            <Border
      Grid.ColumnSpan="3"
      CornerRadius="2">
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                        <GradientStop Color="#F3F1EC" Offset="0.0"/>
                        <GradientStop Color="White" Offset="1"/>
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <RepeatButton 
      Grid.Column="0"                           
      Style="{DynamicResource CTPScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineLeftCommand"
      Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track 
      Name="PART_Track"
      Grid.Column="1"
      IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
          Style="{DynamicResource CTPScrollBarPageButton}"
          Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb 
          Style="{DynamicResource CTPScrollBarThumbHorizontal}" 
          Margin="0,1,0,1"  
          Background="Blue"
          BorderBrush="Purple" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
          Style="{DynamicResource CTPScrollBarPageButton}"
          Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
      Grid.Column="3" 
      Style="{DynamicResource CTPScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineRightCommand"
      Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="CTPVerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <Border
      Grid.RowSpan="3"
      CornerRadius="2" 
      >
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <GradientStop Color="#F3F1EC" Offset="0.0"/>
                        <GradientStop Color="White" Offset="1"/>
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <RepeatButton 
      Grid.Row="0"                           
      Style="{DynamicResource CTPScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineUpCommand"
      Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track 
      Name="PART_Track"
      Grid.Row="1"
      IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
          Style="{DynamicResource CTPScrollBarPageButton}"
          Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb 
          Style="{DynamicResource CTPScrollBarThumb}" 
          Margin="1,0,1,0"  
          Background="Pink"
          BorderBrush="Red" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
          Style="{DynamicResource CTPScrollBarPageButton}"
          Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
      Grid.Row="3" 
      Style="{DynamicResource CTPScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineDownCommand"
      Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <Style x:Key="CTPScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border 
          Name="Border"
          Margin="1" 
          CornerRadius="2" 
          BorderBrush="#9495a2"
          BorderThickness="1">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Color="#F2F2F5" Offset="0.0"/>
                                <GradientStop Color="#C8C9D7" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Path 
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Fill="#91928D"
            Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CTPScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CTPScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border 
          CornerRadius="2" 
          BorderBrush="#9495a2"
          BorderThickness="1">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <GradientStop Color="#F3F3F3" Offset="0.0"/>
                                <GradientStop Color="#DCDDE6" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CTPScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border 
          CornerRadius="2" 
          BorderBrush="#9495a2"
          BorderThickness="1">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Color="#F3F3F3" Offset="0.0"/>
                                <GradientStop Color="#DCDDE6" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabItemStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Height" Value="auto" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Background" Value="{StaticResource MainBackground}" />
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="{Binding CurrentClientStyleUI.OtherFontFamilyUI}"/>
    </Style>

    <Style x:Key="TabItemTriggerStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Margin="0,0,0,0" SnapsToDevicePixels="True" BorderThickness="0" BorderBrush="{DynamicResource gridDefaultColor}">
                            <Grid Margin="0,0,0,0" >
                                <Border Margin="1,3,1,0" SnapsToDevicePixels="True" UseLayoutRounding="True" BorderThickness="1,1,1,0" CornerRadius="4,4,0,0" Background="White">
                                    <Border.BorderBrush>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#222222" Offset="0.0"/>
                                            <GradientStop Color="#232323" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>
                                    <Border SnapsToDevicePixels="True" UseLayoutRounding="True" Name="Border" Margin="1,1,1,0" CornerRadius="2,2,0,0" Background="Transparent">
                                        <!--<Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientStop Color="#FAFAFA" Offset="0.0"/>
                                                <GradientStop Color="#999999" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Border.Background>-->
                                        <Grid >
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="3"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>

                                            <Line X1="0" X2="5" Stretch="Uniform" SnapsToDevicePixels="True" Y1="0" Y2="0" Margin="1,0,1,0" StrokeThickness="1" Stroke="#696969" VerticalAlignment="Top" HorizontalAlignment="Stretch" Visibility="Collapsed"/>
                                            <Line X1="0" X2="5" Stretch="Uniform" SnapsToDevicePixels="True" Y1="0" Y2="0" Margin="1,1,1,0" StrokeThickness="1" Stroke="#606060" VerticalAlignment="Top" HorizontalAlignment="Stretch" Visibility="Collapsed"/>

                                            <StackPanel Orientation="Horizontal" Margin="15,-2,15,0" Grid.Row="1">
                                                <TextBlock  Width="auto"  x:Name="tabText" VerticalAlignment="Center" HorizontalAlignment="Center" TextTrimming="CharacterEllipsis"  TextWrapping="NoWrap" 
                                                            Background="Transparent" Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=Header.Text}" Height="20">
                                                            <!--Text="{TemplateBinding Header}" >-->
                                                    <!--<ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="12,2,12,2" >
                                                    </ContentPresenter>-->
                                                </TextBlock>
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold" TargetName="tabText"/>
                            <Setter Property="TextDecorations" Value="Underline" TargetName="tabText" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="FontWeight" Value="Normal" TargetName="tabText"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabControlNormalStyle" TargetType="{x:Type TabControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFAAAAAA" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TabPanel x:Name="HeaderPanel" Grid.Row="0" Panel.ZIndex="1" Margin="0,0,4,-1" IsItemsHost="True" KeyboardNavigation.TabIndex="1" Background="Transparent" />
                        <Border x:Name="Border" Grid.Row="1" BorderThickness="0" CornerRadius="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2">
                            <!--<Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource ContentAreaColorLight}" Offset="0" />
                                    <GradientStop Color="{DynamicResource ContentAreaColorDark}" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource BorderMediumColor}"/>
                            </Border.BorderBrush>-->
                            <ContentPresenter x:Name="PART_SelectedContentHost" Margin="0,8,0,0" ContentSource="SelectedContent" >                                
                            </ContentPresenter>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="RealDataPriceCellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Stretch">
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{Binding ElementName=CurrentClientStyleUI,Path=ChangeColorBrush}">
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{Binding ElementName=LabelHQ_selected,Path=Background}"/>
                <Setter Property="Background" Value="{Binding ElementName=LabelHQ_selected,Path=Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="BuySellCellStyle" TargetType="{x:Type DataGridCell}" >
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="BorderBrush" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentBackgroundBrush, ElementName=grdMain}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}" ShowGridLines="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center"/>
                        <Border  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultGridBuySellCellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource BuySellCellStyle}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderThickness" Value="0 0 0 1"/>
                <!--<Setter Property="Background" Value="{Binding DataContext.CurrentClientStyleUI.OtherSelectedBackgroundBrush, ElementName=grdMain}"/>-->
                <Setter Property="BorderBrush" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentBackgroundBrush, ElementName=grdMain}"/>
                <!--<Setter Property="BorderBrush" Value="#FFAAC85F"></Setter>-->
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}"></Setter>
            </Trigger>
            <DataTrigger Binding="{Binding BuySell, Converter={StaticResource bsconverter}}" Value="1">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentClientStyleUI.UpColorBrush, ElementName=grdMain }"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding BuySell, Converter={StaticResource bsconverter}}" Value="2">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentClientStyleUI.DownColorBrush, ElementName=grdMain}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style  x:Key="OrderStatusCellStyle" TargetType="{x:Type DataGridCell}" >
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="BorderBrush" Value="{Binding  CurrentClientStyleUI.OtherContentBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}" ShowGridLines="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding OrderStatus, Converter={StaticResource osconverter}}" Value="1">
                <!--<Setter Property="Foreground" Value="{Binding  ElementName=OtherCellUpColor,Path=Foreground}"/>-->
                <Setter Property="Foreground" Value="#FFFF0000"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OrderStatus, Converter={StaticResource osconverter}}" Value="2">
                <Setter Property="Foreground" Value="#FF00BB00"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OrderStatus, Converter={StaticResource osconverter}}" Value="3">
                <Setter Property="Foreground" Value="#FF808000"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OrderStatus, Converter={StaticResource osconverter}}" Value="4">
                <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OrderStatus, Converter={StaticResource osconverter}}" Value="5">
                <Setter Property="Foreground" Value="{DynamicResource CapitalQuery_Equity}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OrderStatus, Converter={StaticResource osconverter}}" Value="6">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentForegroundBrush, ElementName=grdMain}"/>
            </DataTrigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderThickness" Value="0 0 0 1"/>
                <!--<Setter Property="Background" Value="{Binding DataContext.CurrentClientStyleUI.OtherSelectedBackgroundBrush, ElementName=grdMain}"/>-->
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}" />
                <Setter Property="BorderBrush" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentBackgroundBrush, ElementName=grdMain}"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style  x:Key="QuoteStatusCellStyle" TargetType="{x:Type DataGridCell}" >
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="BorderBrush" Value="{Binding  CurrentClientStyleUI.OtherContentBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}" ShowGridLines="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding QuoteStatus, Converter={StaticResource osconverter}}" Value="1">
                <!--<Setter Property="Foreground" Value="{Binding  ElementName=OtherCellUpColor,Path=Foreground}"/>-->
                <Setter Property="Foreground" Value="#FFFF0000"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding QuoteStatus, Converter={StaticResource osconverter}}" Value="2">
                <Setter Property="Foreground" Value="#FF00BB00"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding QuoteStatus, Converter={StaticResource osconverter}}" Value="3">
                <Setter Property="Foreground" Value="#FF808000"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding QuoteStatus, Converter={StaticResource osconverter}}" Value="4">
                <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding QuoteStatus, Converter={StaticResource osconverter}}" Value="5">
                <Setter Property="Foreground" Value="{DynamicResource CapitalQuery_Equity}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding QuoteStatus, Converter={StaticResource osconverter}}" Value="6">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentForegroundBrush, ElementName=grdMain}"/>
            </DataTrigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderThickness" Value="0 0 0 1"/>
                <!--<Setter Property="Background" Value="{Binding DataContext.CurrentClientStyleUI.OtherSelectedBackgroundBrush, ElementName=grdMain}"/>-->
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}" />
                <Setter Property="BorderBrush" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentBackgroundBrush, ElementName=grdMain}"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style  x:Key="ExecStatusCellStyle" TargetType="{x:Type DataGridCell}" >
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="BorderBrush" Value="{Binding  CurrentClientStyleUI.OtherContentBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}" ShowGridLines="True">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding ExecStatus, Converter={StaticResource esconverter}}" Value="1">
                <!--<Setter Property="Foreground" Value="{Binding  ElementName=OtherCellUpColor,Path=Foreground}"/>-->
                <Setter Property="Foreground" Value="#FFFF0000"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ExecStatus, Converter={StaticResource esconverter}}" Value="2">
                <Setter Property="Foreground" Value="#FF00BB00"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ExecStatus, Converter={StaticResource esconverter}}" Value="3">
                <Setter Property="Foreground" Value="#FF808000"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ExecStatus, Converter={StaticResource esconverter}}" Value="4">
                <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ExecStatus, Converter={StaticResource esconverter}}" Value="5">
                <Setter Property="Foreground" Value="{DynamicResource CapitalQuery_Equity}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ExecStatus, Converter={StaticResource esconverter}}" Value="6">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentForegroundBrush, ElementName=grdMain}"/>
            </DataTrigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderThickness" Value="0 0 0 1"/>
                <!--<Setter Property="Background" Value="{Binding DataContext.CurrentClientStyleUI.OtherSelectedBackgroundBrush, ElementName=grdMain}"/>-->
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}" />
                <Setter Property="BorderBrush" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentBackgroundBrush, ElementName=grdMain}"/>
            </Trigger>

        </Style.Triggers>
    </Style>
    
    <Style x:Key="style1" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#FF99CC" />
        <Setter Property="FontSize" Value="6" />
        <Setter Property="FontFamily" Value="Verdena" />
        <Setter Property="Foreground" Value="Darkgray" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <!--控件模板-->
                <ControlTemplate TargetType="{x:Type Button}">
                    <!--背景色-->
                    <Border x:Name="back" Opacity="1" CornerRadius="0">
                        <Border.BitmapEffect>
                            <OuterGlowBitmapEffect Opacity="0.9" GlowSize="0" GlowColor="{Binding (Control.Background).(SolidColorBrush.Color), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Border.BitmapEffect>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="White" Offset="0"/>
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <!--前景色及边框-->
                        <Border x:Name="fore" BorderThickness="1" CornerRadius="0" BorderBrush="#FF948C8C">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#6FFF" Offset="0.5"/>
                                            <GradientStop Color="#1111" Offset="0.51"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <!--按钮内容-->
                            <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}"/>
                        </Border>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--鼠标移入移出-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="10" Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(UIElement.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)" />
                                        <ColorAnimation To="#AFFF" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"/>
                                        <ColorAnimation To="#3FFF" BeginTime="0:0:0.2" Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="back" Storyboard.TargetProperty="(UIElement.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)"/>
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"/>
                                        <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--按钮按下弹起-->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="3" Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(UIElement.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)"/>
                                        <ColorAnimation To="#3AAA" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"/>
                                        <ColorAnimation To="#2111" Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(UIElement.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)"/>
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"/>
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--按钮失效-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="0:0:0.3" Storyboard.TargetName="back" Storyboard.TargetProperty="(UIElement.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)"/>
                                        <DoubleAnimation To="1" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.BitmapEffect).(DropShadowBitmapEffect.Opacity)"/>
                                        <DoubleAnimation To="-135" Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.BitmapEffect).(DropShadowBitmapEffect.Direction)"/>
                                        <ColorAnimation To="#FFF" Duration="0:0:0.3" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.BitmapEffect).(DropShadowBitmapEffect.Color)"/>
                                        <ColorAnimation To="#D555" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        <ColorAnimation To="#CEEE" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"/>
                                        <ColorAnimation To="#CDDD" Duration="0:0:0.3" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="back" Storyboard.TargetProperty="(UIElement.BitmapEffect).(OuterGlowBitmapEffect.GlowSize)"/>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.BitmapEffect).(DropShadowBitmapEffect.Opacity)"/>
                                        <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.BitmapEffect).(DropShadowBitmapEffect.Direction)"/>
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="content" Storyboard.TargetProperty="(UIElement.BitmapEffect).(DropShadowBitmapEffect.Color)"/>
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)"/>
                                        <ColorAnimation Duration="0:0:0.1" Storyboard.TargetName="fore" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Foreground" Value="#B444"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style  TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border" Background="Beige" BorderBrush="Silver" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" >
                            <ContentPresenter x:Name="ContentSite"  VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="2,1,2,1"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <!--<Setter Property="Foreground" Value="Blue" />-->
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MLB_Separator" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Rectangle  Height="1" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridHQStyle"  TargetType="DataGrid">
        <Setter Property="Background" Value="{Binding CurrentClientStyleUI.HQContentBackgroundBrush}"/>
        <Setter Property="RowBackground" Value="{Binding CurrentClientStyleUI.HQOddColorBrush}"/>
        <Setter Property="AlternatingRowBackground" Value="{Binding CurrentClientStyleUI.HQEvenColorBrush}"/>
        <Setter Property="Foreground" Value="{Binding CurrentClientStyleUI.HQContentForegroundBrush}"/>
        <Setter Property="FontFamily" Value="{Binding CurrentClientStyleUI.HQFontFamilyUI}"/>
        <Setter Property="FontSize" Value="{Binding CurrentClientStyleUI.HQFontSize}"/>
        <Setter Property="FontWeight" Value="{Binding CurrentClientStyleUI.HQFontWeightUI}"/>
        <Setter Property="FontStyle" Value="{Binding CurrentClientStyleUI.HQFontStyleUI}"/>
        <Setter Property="RowHeight" Value="{Binding CurrentClientStyleUI.HQRowHeightValue}"/>

    </Style>

    <Style x:Key="DataGridOtherStyle"  TargetType="DataGrid">
        <Setter Property="Background" Value="{Binding CurrentClientStyleUI.OtherContentBackgroundBrush}"/>
        <Setter Property="RowBackground" Value="{Binding CurrentClientStyleUI.OtherOddColorBrush}"/>
        <Setter Property="AlternatingRowBackground" Value="{Binding CurrentClientStyleUI.OtherEvenColorBrush}"/>
        <Setter Property="Foreground" Value="{Binding CurrentClientStyleUI.OtherContentForegroundBrush}"/>
        <Setter Property="FontFamily" Value="{Binding CurrentClientStyleUI.OtherFontFamilyUI}"/>
        <Setter Property="FontSize" Value="{Binding CurrentClientStyleUI.OtherFontSize}"/>
        <Setter Property="FontWeight" Value="{Binding CurrentClientStyleUI.OtherFontWeightUI}"/>
        <Setter Property="FontStyle" Value="{Binding CurrentClientStyleUI.OtherFontStyleUI}"/>
        <Setter Property="RowHeight" Value="{Binding CurrentClientStyleUI.OtherRowHeightValue}"/>
        <Setter Property="BorderThickness" Value="0.5"/>

        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="SelectionUnit" Value="FullRow"/>
        <Setter Property="CanUserSortColumns" Value="True"/>
    </Style>

    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridViewColumnOtherStyle"  TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Height" Value="24"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Border x:Name="BackgroundBorder"
                                Background="{TemplateBinding Background}" 
                                BorderBrush="Gray" 
                                BorderThickness="0 0 1 1" 
                                Grid.ColumnSpan="2" />

                        <ContentPresenter Margin="6,3,6,3" VerticalAlignment="Center" />
                        <Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" Stretch="Fill" 
                              Grid.Column="1" Width="8" Height="6" Fill="Gray" Margin="0,0,8,0" 
                              VerticalAlignment="Center" RenderTransformOrigin="0.5,0.4" />
                        <!--<Rectangle Width="1" Fill="Gray" HorizontalAlignment="Right" Grid.ColumnSpan="2" />-->

                        <!--<Rectangle Width="1" Margin="0,0,1,0" Fill="#425B10" 
                                   HorizontalAlignment="Right" Grid.ColumnSpan="2" />-->
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" 
                               Style="{StaticResource ColumnHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" 
                               Style="{StaticResource ColumnHeaderGripperStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="DisplayIndex" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" 
                                    TargetName="PART_LeftHeaderGripper"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridViewCellOtherStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="BorderThickness" Value="0 0 1 1"/>


        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{Binding CurrentClientStyleUI.OtherContentForegroundBrush}"/>
                <Setter Property="BorderThickness" Value="0 0 0 1"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="DefaultGridViewCellOtherStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource GridViewCellOtherStyle}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="BorderBrush" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentBackgroundBrush, ElementName=grdMain}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter Margin="4 0 4 0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <!--<Setter Property="Background" Value="{Binding DataContext.CurrentClientStyleUI.OtherSelectedBackgroundBrush, ElementName=grdMain}"/>-->
                <Setter Property="BorderBrush" Value="{Binding DataContext.CurrentClientStyleUI.OtherContentBackgroundBrush, ElementName=grdMain}"/>
                <!--<Setter Property="BorderBrush" Value="#FFAAC85F"></Setter>-->
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <LinearGradientBrush x:Key="StyleGradient"  EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#D6F0F5" Offset="0" />
        <GradientStop Color="#B1F0E3" Offset="1" />
    </LinearGradientBrush>

    <Style x:Key="DefaultGridViewCellOtherStyleLeft" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource DefaultGridViewCellOtherStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border Margin="4 0 4 0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultGridViewCellOtherStyleRight" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource DefaultGridViewCellOtherStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border Margin="4 0 4 0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="GridViewRowOtherStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!--合约下拉列表中的TextBox的样式-->
    <Style TargetType="{x:Type TextBox}" x:Key="codeStyleExCTP">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border"
                CornerRadius="1"
                Padding="0"
                BorderThickness="1">
                        <Border.Background>
                            <SolidColorBrush Color="White" />
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#96B0CD" />
                        </Border.BorderBrush>
                        <ScrollViewer Margin="0"
                        x:Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NewDYDatagridStyleCell" TargetType="DataGridCell">
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>        
    </Style>

    <!--Option Style-->
    <!--<SolidColorBrush x:Key="selRowBackColor" Color="#4598E9"/>-->
    <!--各个列表控件的背景颜色-->
    <SolidColorBrush x:Key="GridControlBackground" Color="#F0F0F0"/>

    <!--状态栏时间颜色，正常-->
    <SolidColorBrush x:Key="StatusBarTextColorNormal" Color="Black"/>

    <!--状态栏时间颜色，警告-->
    <SolidColorBrush x:Key="StatusBarTextColorAlert" Color="Red"/>

    <!--状态栏时间颜色，交易-->
    <SolidColorBrush x:Key="StatusBarTimeColorNormal" Color="#7593D1"/>

    <!--状态栏时间颜色，非交易-->
    <SolidColorBrush x:Key="StatusBarTimeColorAlert" Color="Red"/>

    <!--所有表格中合约的颜色-->
    <SolidColorBrush x:Key="gridCodeColor" Color="#D6B931"/>
    <!--//Color="#967B0A"/>-->

    <!--所有表格中默认的颜色-->
    <SolidColorBrush x:Key="gridDefaultColor" Color="#191816"/>


    <!--选中的行的颜色-->
    <SolidColorBrush x:Key="selRowBackColor" Color="#E4F2FF"/>

    <!--透明颜色 上-->
    <SolidColorBrush x:Key="OpacityColorUp" Color="#E2EBF7"/>

    <!--透明颜色 下-->
    <SolidColorBrush x:Key="OpacityColorDown" Color="#D6F2FA"/>

    <!--上涨颜色-->
    <Color x:Key="UpColor">Red</Color>

    <!--下跌颜色-->
    <Color x:Key="DownColor">#008000</Color>

    <!--表格列表 上涨颜色-->
    <SolidColorBrush x:Key="DatagridUpColor" Color="#FE0000"/>

    <!--表格列表 下跌颜色-->
    <SolidColorBrush x:Key="DatagridDownColor" Color="#25B903"/>

    <!--表格列表 数据变化颜色-->
    <SolidColorBrush x:Key="DatagridChangeColor" Color="#191816"/>

    <!--表格列表，买量的颜色-->
    <SolidColorBrush x:Key="buyBackground" Color="#F8E6E6"/>

    <!--表格列表，买量的颜色，选中-->
    <SolidColorBrush x:Key="buyBackground_Sel" Color="#F8EAE9"/>

    <!--表格列表，卖量的颜色-->
    <SolidColorBrush x:Key="sellBackground" Color="#D8EFE9"/>

    <!--表格列表，卖量的颜色，选中-->
    <SolidColorBrush x:Key="sellBackground_Sel" Color="#DBF2EA"/>

    <!--资金查询，单元文本信息的颜色，可用资金的值-->
    <SolidColorBrush x:Key="CapitalQuery_KYZJ_Value" Color="#00C9FF"/>

    <!--资金查询，单元文本信息的颜色，持仓盈亏-->
    <SolidColorBrush x:Key="CapitalQuery_CCYK_DOWN" Color="#25BA00"/>

    <!--资金查询，单元文本信息的颜色，权益-->
    <SolidColorBrush x:Key="CapitalQuery_Equity" Color="#26A8F6"/>

    <!--资金查询，单元文本信息的颜色，仓位-->
    <SolidColorBrush x:Key="CapitalQuery_CW" Color="#494949"/>

    <Style x:Key="NewDYDatagridStyleRowEx" TargetType="DataGridRow" BasedOn="{StaticResource GridViewRowOtherStyle}">
        <!--<Setter Property="ToolTip" Value="双击下单"/>-->
        <!--"双击撤单"-->
        <Setter Property="FontFamily" Value="{Binding CurrentClientStyleUI.HQFontFamilyUI}"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--列头颜色-->
    <Style x:Key="ThemeColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontFamily" Value="{Binding CurrentClientStyleUI.HQFontFamilyUI}"/>
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid>
                        <Border BorderThickness="0,0,0,0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Name="sortColumn" Width="0"/>
                                    <ColumnDefinition Width="5"/>
                                </Grid.ColumnDefinitions>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
    </Style>

    <!--表格格式-->
    <Style x:Key="ThemeDatagridStyle" TargetType="DataGrid">
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="FontFamily" Value="{Binding CurrentClientStyleUI.HQFontFamilyUI}"/>
        <Setter Property="FontSize" Value="13"></Setter>
        <Setter Property="RowHeaderWidth" Value="0"></Setter>
        <Setter Property="RowBackground" Value="White"></Setter>
        <Setter Property="AlternatingRowBackground" Value="#F4F4F4"/>
        <Setter Property="Background" Value="#F8F8F8"/>
        <Setter Property="GridLinesVisibility" Value="None"></Setter>
        <Setter Property="RowHeight" Value="29"></Setter>
        <Setter Property="CanUserAddRows" Value="False"></Setter>
        <Setter Property="CanUserDeleteRows" Value="False"></Setter>
        <Setter Property="IsReadOnly" Value="True"></Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <!--<Style.Resources>
            <Style TargetType="{x:Type ScrollBar}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="Height" Value="18"/>
                        <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}"/>
                    </Trigger>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Width" Value="18"/>
                        <Setter Property="Height" Value="Auto"/>
                        <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>-->
    </Style>

    <Style x:Key="CellStyle_Code" TargetType="DataGridCell" BasedOn="{StaticResource CenterAlignmentHQCellStyle}">
        <Setter Property="Foreground" Value="{DynamicResource gridCodeColor}"></Setter>
        <Setter Property="FontWeight" Value="Bold"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource selRowBackColor}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CellStyle_Default" TargetType="DataGridCell" BasedOn="{StaticResource CenterAlignmentHQCellStyle}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource selRowBackColor}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CellStyle_Default_Up" TargetType="DataGridCell" BasedOn="{StaticResource CenterAlignmentHQCellStyle}">
        <Setter Property="Foreground" Value="{DynamicResource DatagridUpColor}"></Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CellStyle_Default_Down" TargetType="DataGridCell" BasedOn="{StaticResource CenterAlignmentHQCellStyle}">
        <Setter Property="Foreground" Value="{DynamicResource DatagridDownColor}"></Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CellStyle_Middle_Price" TargetType="DataGridCell" BasedOn="{StaticResource CenterAlignmentHQCellStyle}">
        <Setter Property="Foreground" Value="{DynamicResource gridCodeColor}"></Setter>
        <Setter Property="Background" Value="#556495ED"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style  TargetType="{x:Type DataGridCell}" x:Key="CenterAlignmentHQCellStyle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch">
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="{Binding CurrentClientStyleUI.HQFontFamilyUI}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="4 0 4 0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource selRowBackColor}"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--表格列表中可双击区域显示的按钮的样式-->
    <Style x:Key="ShadowRectangle" TargetType="Rectangle">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="Stretch" Value="Fill"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="RadiusX" Value="2"/>
        <Setter Property="RadiusY" Value="2"/>
        <Setter Property="StrokeThickness" Value="1"/>
        <Setter Property="Stroke" Value="#768CA3"/>
        <Setter Property="Fill">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#F6FCFF" Offset="0.0"/>
                    <GradientStop Color="#DCE9F5" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="#768CA3"  ShadowDepth="0" BlurRadius="2"/>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TradeButton" TargetType="{x:Type Button}" >
        <Setter Property="Foreground" Value="#282828"/>
        <Setter Property="FontSize" Value="16"/>
        <!--<Setter Property="FontFamily" Value="{DynamicResource fontResource}"/>-->
        <Setter Property="Background" >
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0.0" Color="#ffb71b"></GradientStop>
                    <GradientStop Offset="1" Color="#ff7800"></GradientStop>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" ClipToBounds="true" CornerRadius="3,3,3,3" SnapsToDevicePixels="True" UseLayoutRounding="True">
                        <Border.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Color="#ffb71b" Offset="0.0"/>
                                <GradientStop Color="#ff7800" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.BorderBrush>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Color="#ffb71b" Offset="0.0"/>
                                <GradientStop Color="#ff7800" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Border>
                            <Grid>
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <TextBlock Text="{Binding}"  FontStretch="UltraExpanded">
                                                </TextBlock>
                                            </Grid>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="mainWndBackground" Color="#353535"/>
    <SolidColorBrush x:Key="TradeTextBlock" Color="#8A8A8A"/>
    <SolidColorBrush x:Key="TradeBoxBorder" Color="#FFCC33"/>
    <SolidColorBrush x:Key="TradeBoxBackground" Color="#3D3D3D"/>

    <Style x:Key="TradeComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource TradeTextBlock}"/>
        <Setter Property="Background" Value="{DynamicResource TradeBoxBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TradeTextBlock}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="BorderThickness" Value="1" />
        <!--<Setter Property="ItemContainerStyle" Value="{DynamicResource TradeComboxItem}"/>-->
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource TradeBoxBorder}" />
                <Setter Property="Background" Value="{DynamicResource TradeBoxBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TradeTextBlock}" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource TradeBoxBorder}" />
                <Setter Property="Background" Value="{DynamicResource TradeBoxBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource TradeTextBlock}" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TradeComboxItem" TargetType="ComboBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <Grid>
                                    <TextBlock Background="{DynamicResource TradeBoxBackground}" Foreground="{DynamicResource TradeTextBlock}"/>
                                </Grid>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                    <!--<Border  Name="Border" Padding="2" SnapsToDevicePixels="true">
                        <ContentPresenter >
                            <TextBlock Foreground="Red">Red</TextBlock>
                        </ContentPresenter>
                    </Border>-->
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource SelectedBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TradePwdBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="Foreground" Value="{DynamicResource TradeTextBlock}"/>
        <Setter Property="Background" Value="{DynamicResource TradeBoxBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TradeTextBlock}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="BorderThickness" Value="1" />
        <!--<Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource TradeBoxBorder}" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <Style x:Key="TradetTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource TradeTextBlock}"/>
        <Setter Property="Background" Value="{DynamicResource TradeBoxBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TradeTextBlock}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="BorderThickness" Value="1" />
        <!--<Style.Triggers>
            <Trigger Property="IsFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource TradeBoxBorder}" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!-- CheckBox的样式 -->
    <Style x:Key="TradeLoginCheckBox" TargetType="{x:Type CheckBox}">
        <!--<Setter Property="OverridesDefaultStyle" Value="True"/>-->
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusStyle}"/>-->
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <!--<Setter Property="Foreground" Value="White"/>-->
        <!--<Setter Property="FontSize" Value="16"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator FlowDirection="LeftToRight" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border x:Name="bd" BorderThickness="1" BorderBrush="{DynamicResource TradeTextBlock}" MinHeight="15" MinWidth="15" VerticalAlignment="Center" Background="{DynamicResource TradeBoxBackground}">
                                <Path x:Name="cp" Width="12" Height="12" Stroke="{DynamicResource TradeBoxBorder}" StrokeThickness="3"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="2,0"/>
                    </BulletDecorator>
                    <!-- 控件触发器 -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <!-- 画上一个勾 -->
                            <Setter TargetName="cp" Property="Data"
                                        Value="M 0,6 L 6,12 12,0"/>
                            <!--<Setter Property="Foreground" Value="LightGreen"/>-->
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="bd" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStop Color="Orange" Offset="0.12"/>
                                        <GradientStop Color="Yellow" Offset="0.92"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource fontResource}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border ClipToBounds="true"  BorderBrush="Black">
                            <!--<Border.BorderBrush >
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Color="#111111" Offset="0.0"/>
                                    <GradientStop Color="#FFFFFF" Offset="0.1"/>
                                </LinearGradientBrush>
                            </Border.BorderBrush>-->
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#383838" Offset="0.0"/>
                                            <GradientStop Color="#484848" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Grid ClipToBounds="True">
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <TextBlock Text="{Binding}" FontStretch="UltraExpanded"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainCapButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource fontResource}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border ClipToBounds="true"  BorderBrush="Black" Background="#FF6D6D6D">
                            <!--<Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#414141" Offset="0.0"/>
                                            <GradientStop Color="#2F2F2F" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>-->
                            <Grid ClipToBounds="True">
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Image Grid.Row="1" Width="28" Height="28"  Source="/TradingMaster;component/image/Fund.jpg" HorizontalAlignment="Center" />
                                                <TextBlock Grid.Row="3" Text="{Binding}" HorizontalAlignment="Center" FontStretch="UltraExpanded"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainTransferButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource fontResource}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border ClipToBounds="true"  BorderBrush="Black" Background="#FF6D6D6D">
                            <!--<Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#414141" Offset="0.0"/>
                                            <GradientStop Color="#2F2F2F" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>-->
                            <Grid ClipToBounds="True">
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Image Grid.Row="1" Width="28" Height="28"  Source="/TradingMaster;component/image/Suanpan.png" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                                                <TextBlock Grid.Row="3" Text="{Binding}" HorizontalAlignment="Center" FontStretch="UltraExpanded"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainCalButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource fontResource}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border ClipToBounds="true"  BorderBrush="Black" Background="#FF6D6D6D">
                            <!--<Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#414141" Offset="0.0"/>
                                            <GradientStop Color="#2F2F2F" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>-->
                            <Grid ClipToBounds="True">
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Image Grid.Row="1" Width="28" Height="28"  Source="/TradingMaster;component/image/CalculatorMini.png" HorizontalAlignment="Center" VerticalAlignment="Top" />
                                                <TextBlock Grid.Row="3" Text="{Binding}" HorizontalAlignment="Center" FontStretch="UltraExpanded"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainPwdButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource fontResource}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border ClipToBounds="true"  BorderBrush="Black" Background="#FF6D6D6D">
                            <!--<Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#414141" Offset="0.0"/>
                                            <GradientStop Color="#2F2F2F" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>-->
                            <Grid ClipToBounds="True">
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Image Grid.Row="1" Width="28" Height="28"  Source="/TradingMaster;component/image/Lock.png" HorizontalAlignment="Center" />
                                                <TextBlock Grid.Row="3" Text="{Binding}" HorizontalAlignment="Center" FontStretch="UltraExpanded"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainOptionButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource fontResource}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border ClipToBounds="true"  BorderBrush="Black" Background="#FF6D6D6D">
                            <!--<Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#414141" Offset="0.0"/>
                                            <GradientStop Color="#2F2F2F" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>-->
                            <Grid ClipToBounds="True">
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Image Grid.Row="1" Width="28" Height="28"  Source="/TradingMaster;component/image/Futures22px.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                <TextBlock Grid.Row="3" Text="{Binding}" HorizontalAlignment="Center" FontStretch="UltraExpanded"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainFreshButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="{DynamicResource fontResource}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border ClipToBounds="true"  BorderBrush="Black" Background="#FF6D6D6D">
                            <!--<Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="#414141" Offset="0.0"/>
                                            <GradientStop Color="#2F2F2F" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>-->
                            <Grid ClipToBounds="True">
                                <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="1"/>
                                                    <RowDefinition Height="*"/>
                                                </Grid.RowDefinitions>
                                                <Image Grid.Row="1" Width="28" Height="28"  Source="/TradingMaster;component/image/Fresh.png" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                <TextBlock Grid.Row="3" Text="{Binding}" HorizontalAlignment="Center" FontStretch="UltraExpanded"/>
                                            </Grid>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>